//
// app 1
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
import java.util.*;
class Solution {
    public boolean isPalindrome(ListNode head) {
      List<Integer> list = new ArrayList<>();
        ListNode temp = head;
        while(temp!=null ){
            list.add(temp.val);
            temp = temp.next;
        }
        int arr[]= new int[list.size()];
        for(int i=0;i<arr.length;i++){
            arr[i] = list.get(i);
        }
        list.clear();
        for(int i=0;i<arr.length/2;i++){
            if(arr[i] != arr[arr.length-i-1]) return false;
        }
        return true;
    }
}

// using recursion
import java.util.*;
class Solution {
    ListNode ref;
    public boolean isPalindrome(ListNode head) {
        ref = head;        
        return check(head);
    }
    
    public boolean check(ListNode node){
        if(node == null) return true;
        boolean ans = check(node.next);
        boolean isEqual = (ref.val == node.val)? true : false; 
        ref = ref.next;
        return ans && isEqual;
    }
}
